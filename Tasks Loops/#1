1. **Basic Simple Loop**
    - Task: Write a simple loop that prints numbers from 1 to 5.
DECLARE
     v_counter NUMBER := 1;
BEGIN 
LOOP
     DBMS_OUTPUT.PUT_LINE(v_counter);
     v_counter := v_counter + 1;
  exit when  v_counter > 5;
  END LOOP;
  END;
  set serveroutput on;
2. **FOR Loop with Range**
    - Task: Use a FOR loop to print numbers from 1 to 10.
  BEGIN
  for v_num IN 1..10 LOOP
     DBMS_OUTPUT.PUT_LINE(v_num);
  END LOOP;
END;
3. **WHILE Loop**
    - Task: Utilize a WHILE loop to print numbers from 10 down to 1.
DECLARE
     v_num NUMBER := 10;
     BEGIN
  while v_num >= 1 LOOP
     DBMS_OUTPUT.PUT_LINE(v_num);
     v_num := v_num-1;
  END LOOP;
END;
4. **Nested Loops**
    - Task: Create nested loops to print a pattern of numbers.
BEGIN
  FOR i IN 1..3 LOOP
    FOR j IN 1..3 LOOP
        DBMS_OUTPUT.PUT_LINE(i || ', ' || j);
     END LOOP;
  END LOOP;
END;
5. **Loop with EXIT**
    - Task: Write a loop that prints numbers from 1 to 5 but uses the EXIT command to break out of the loop when the counter reaches 3.
DECLARE
   v_num NUMBER := 1;
BEGIN
  LOOP
     
     EXIT WHEN v_num > 3 ;
     DBMS_OUTPUT.PUT_LINE(v_num);
     IF v_num=3 then
     EXIT;
     END IF;
     v_num := v_num + 1;
  END LOOP;
END;

8. **Loop with CONTINUE**
    - Task: Write a loop that prints numbers from 1 to 5, but skips the number 3 using the CONTINUE command.
BEGIN
  FOR i IN 1..5 LOOP
     IF i = 3 THEN
        CONTINUE;
     END IF;
     DBMS_OUTPUT.PUT_LINE(i);
  END LOOP;
END;
9. **LOOP with EXIT WHEN**
    - Task: Create a loop that starts with a variable set to 10 and decrements it, printing out its value, until it's less than 5.
DECLARE
   v_counter NUMBER := 10;
BEGIN
  LOOP
     DBMS_OUTPUT.PUT_LINE(v_counter);
     v_counter := v_counter - 1;
     IF v_counter < 5 THEN
        EXIT;
     END IF;
  END LOOP;
END;
10. **WHILE Loop with Database Interaction**
- Task: Assume a fictional table `orders` has a `status` column. Use a WHILE loop to continuously check the first order's status until it changes to 'SHIPPED'.
 DECLARE
   v_status VARCHAR2(50);
BEGIN
  SELECT status INTO v_status FROM orders WHERE ROWNUM = 1;
  while v_status <> 'SHIPPED' LOOP
     DBMS_OUTPUT.PUT_LINE('Waiting for shipment...');
     DBMS_LOCK.SLEEP(3) ; -- Let's assume this is a sleep function to wait for 3 seconds
     SELECT status INTO v_status FROM orders WHERE ROWNUM = 1;
  END LOOP;
END;



